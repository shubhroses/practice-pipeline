apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-demo
  labels:
    app: flask-demo
    version: "1.0.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-demo
  template:
    metadata:
      labels:
        app: flask-demo
        version: "1.0.0"
    spec:
      # Security: Pod Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: flask
        image: flask-demo
        imagePullPolicy: Never
        ports:
        - containerPort: 5000
          protocol: TCP
        # Security: Container Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Flask needs to write logs
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE  # Only if binding to privileged ports
        # Resource limits for better resource management
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        # Health checks for reliability
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        # Security: Environment variables for config
        env:
        - name: FLASK_ENV
          value: "production"
        - name: PYTHONUNBUFFERED
          value: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: flask-service
  labels:
    app: flask-demo
spec:
  type: NodePort
  selector:
    app: flask-demo
  ports:
    - port: 5000
      targetPort: 5000
      nodePort: 30007
      protocol: TCP